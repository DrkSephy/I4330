############################# David Leonard 		   ## tutnese.py    		   ## *~-drksephy.github.io*~- #############################import relanguage = {	'b': 'bub',	'c': 'coch',	'd': 'dud',	'f': 'fuf',	'g': 'gug',	'h': 'hash',	'j': 'jug',	'k': 'kuck',	'l': 'lul',	'm': 'mum',	'n': 'nun', 	'p': 'pup',	'q': 'quack',	'r': 'rur',	's': 'sus',	't': 'tut',	'v': 'vuv',	'w': 'wack',	'x': 'xux',	'y': 'yub',	'z': 'zug'}doubleLanguage = {	'squab': 'bb', 	'squac': 'cc',	'squad': 'dd',	'squaf': 'ff',	'squag': 'gg',	'squah': 'hh',	'squaj': 'jj',	'squak': 'kk',	'squal': 'll',	'squam': 'mm',	'squan': 'nn',	'squap': 'pp',	'squaq': 'qq',	'squar': 'rr',	'squas': 'ss',	'squat': 'tt',	'squav': 'vv',	'squaw': 'ww',	'squax': 'xx',	'squay': 'yy',	'squaz': 'zz'}vowels = ['a', 'o', 'e', 'i', 'u']def encode(phrase):	lowerPhrase = phrase.lower()	words = lowerPhrase.split()	# print words	translation = []	for word in words:		currWord = ''		for i in range(len(word)):			# Store current letter			currLetter = word[i]			nextLetter = ''			prevLetter = ''			# Get the next letter			if i < len(word) - 1:				nextLetter = word[i + 1]			# Get the previous letter if possible			if i > 0:				prevLetter = word[i - 1]			# Handle double character case			if currLetter == nextLetter and currLetter not in vowels:				currWord += 'squa'			# Previous character case			# Now we insert the repeated character			elif currLetter == prevLetter:				currWord += currLetter			elif currLetter in language.keys():				currWord += language[currLetter]			else:				currWord += currLetter		translation.append(currWord)	return ' '.join(translation)def decode(phrase):		lowerPhrase = phrase.lower()	words = lowerPhrase.split()	words = filter(None, words)	translation = []	for word in words:		currWord = ''		for pattern in doubleLanguage:			patt = re.compile(pattern)			if re.sub(patt, doubleLanguage[pattern], word):				currWord += re.sub('squal', 'll', 'squal')				break			print "currWord: " + currWord		translation.append(currWord)	return ' '.join(translation)	"""	final_str = ''	for char in phrase:		# print languageReversed[char]		pattern = re.compile(char)		final_str += re.sub(pattern, language[char], char)	return final_str	"""#print encode('Over hill, over dale, Thorough bush, thorough brier, Over park, over pale, Thorough flood, thorough fire!')print decode('squal squal')